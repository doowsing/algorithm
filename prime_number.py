'''
输出思路：假如一个数能不被比这个数小的所有质数整除，那么这个数是质数
例如1：判断10是否是质数，比10小的质数有[2，5，7]，10可被2与5整除，不符合质数的定义
例如2：判断11是否是质数，比11小的质数有[2，5，7]，11没办法被这三个质数整除，符合质数的定义，将11加入质数集合
例如3：判断12是否是质数，比12小的质数有[2，5，7，11]，12可被2整除，不符合质数的定义

对比传统算法：
    传统算法：将k除以[2,k)之间的所有数，若均不被整除则k为质数
    对比优点：在求质数列表时只需除以比k小的质数
    对比缺点：在求区间内质数时，需求出所有区间外左侧所有质数
'''

def print_prime(n):
    if n<2:
        return
    pri_list=[]

    for i in range(2,n+1):
        finded = False
        for pri in pri_list:
            if i%pri==0:
                finded = True
                break
        if not finded:
            pri_list.append(i)

    print(pri_list)

print_prime(50)
# 输出：[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
